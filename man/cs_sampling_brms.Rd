% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cs_sampling_brms.R
\name{cs_sampling_brms}
\alias{cs_sampling_brms}
\title{cs_sampling_brms}
\usage{
cs_sampling_brms(
  svydes,
  brmsmod,
  data,
  family,
  par_brms = NA,
  prior = NULL,
  stanvars = NULL,
  knots = NULL,
  ctrl_stan = list(chains = 1, iter = 2000, warmup = 1000, thin = 1),
  rep_design = FALSE,
  ctrl_rep = list(replicates = 100, type = "mrbbootstrap"),
  stancode_args = list(),
  standata_args = list(),
  H_estimate = "MCMC",
  matrix_sqrt = "eigen",
  sampling_args = list()
)
}
\arguments{
\item{svydes}{\itemize{
\item a \code{\link[survey]{svydesign}} object or a \code{\link[survey]{svrepdesign}} object. This contains cluster ID, strata, and weight information (\code{\link[survey]{svydesign}}) or replicate weight information (\code{\link[survey]{svrepdesign}})
}}

\item{brmsmod}{\itemize{
\item \code{\link[brms]{brmsformula}}  object, as input to \code{\link[brms]{make_stancode}}. The \code{\link[brms]{brmsformula}}  must specify a weight variable via weights().
}}

\item{data}{\itemize{
\item a data frame, as input to \code{\link[brms]{make_stancode}}
}}

\item{family}{\itemize{
\item \code{\link[brms]{brmsfamily}} as input to \code{\link[brms]{make_stancode}} specifying distribution and link function
}}

\item{par_brms}{\itemize{
\item a list of a subset of parameters to output after adjustment. All parameters are adjusted including the derived parameters, so users may want to only compare subsets. The default, NA, will return all parameters.
}}

\item{prior}{\itemize{
\item optional input to \code{\link[brms]{make_stancode}}
}}

\item{stanvars}{\itemize{
\item optional input to \code{\link[brms]{make_stancode}}
}}

\item{knots}{\itemize{
\item optional input to \code{\link[brms]{make_stancode}}
}}

\item{ctrl_stan}{\itemize{
\item a list of control parameters to pass to \code{\link[rstan]{sampling}}. Currently includes the number of chains, iter, warmpup, and thin with defaults.
}}

\item{rep_design}{\itemize{
\item logical indicating if the svydes object is a \code{\link[survey]{svrepdesign}}. If FALSE, the design will be converted to a \code{\link[survey]{svrepdesign}} using ctrl_rep settings
}}

\item{ctrl_rep}{\itemize{
\item a list of settings when converting svydes from a \code{\link[survey]{svydesign}} object to a \code{\link[survey]{svrepdesign}} object. replicates - number of replicate weights. type - the type of replicate method to use, the default is mrbbootstrap which sample half of the clusters in each strata to make each replicate (see \code{\link[survey]{as.svrepdesign}}).
}}

\item{stancode_args}{\itemize{
\item a list of extra arguments to be passed to \code{\link[brms]{make_stancode}}.
}}

\item{standata_args}{\itemize{
\item a list of extra arguments to be passed to \code{\link[brms]{make_standata}}.
}}

\item{H_estimate}{\itemize{
\item a string indicating the method to use to estimate H. The default "MCMC" is Monte Carlo averaging over posterior draws. Otherwise, a plug-in using the posterior mean.
}}

\item{matrix_sqrt}{\itemize{
\item a string indicating the method to use to take the "square root" of the R1 and R2 matrices. The default "eigen" uses the eigenvalue decomposition. Otherwise, the Cholesky decomposition is used.
}}

\item{sampling_args}{\itemize{
\item a list of extra arguments to be passed to \code{\link[rstan]{sampling}}.
}}
}
\value{
The output of cs_sampling.
}
\description{
cs_sampling_brms is a wrapper function that takes inputs in the form of model statements in familiar brms syntax.
Then brms helper functions build Stan models and call cs_sampling.
}
\examples{

#continuous dependent variable
# Survey Design Information
library(survey)
data(api)
apistrat$wt <- apistrat$pw /mean(apistrat$pw)

dstrat <-
svydesign(id=~1,strata=~stype, weights=~wt, data=apistrat, fpc=~fpc)

#Define and Run the Stan Model Via BRMS Wrapper
library(brms)
set.seed(12345)
model_formula <- formula("api00|weights(wt) ~
                            ell + meals + mobility")
mod.brms <- cs_sampling_brms(svydes = dstrat,
                             brmsmod = brmsformula(model_formula, center = FALSE),
                             data = apistrat, family = gaussian())

#Plot the results

plot(mod.brms)
plot(mod.brms, varnames = paste("b", 1:4, sep =""))

}

% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/csSampling-package.R
\docType{package}
\name{csSampling-package}
\alias{csSampling}
\alias{csSampling-package}
\title{csSampling: Complex Survey Sampling}
\description{
Cs_sampling provides estimation of Bayesian models for data collected from complex survey samples by combining functionality from Stan (via rstan and brms) and the survey package. The user can create a survey weighted model in brms or provide custom weighted model via rstan. Survey design information is provided via svydesign objects from the survey package. Cs_sampling estimates the weighted stan model and provides an asymptotic covariance correction for model mis-specification due to using survey sampling weights as plug in values in the likelihood. This is often known as a "design effect" which is the "ratio" between the variance from simple random sample and a complex survey sample. See Williams, M. R., and Savitsky, T. D. (2020) Uncertainty Estimation for Pseudo-Bayesian Inference Under Complex Sampling. International Statistical Review, https://doi.org/10.1111/insr.12376.
}
\details{
ESTIMATION

\code{\link{cs_sampling}} provides for weighted MCMC estimation of a Bayesian model using survey weights.
It also provides an asymptotic adjustment to the parameter covariance.
It takes in a \code{\link[survey]{svydesign}} object (survey) and a \code{\link[rstan]{stan_model}} and inputs for \code{\link[rstan]{sampling}}.
\code{\link{cs_sampling_brms}} is a wrapper function that takes inputs in the form of model statements in familiar brms syntax via \code{\link[brms]{brmsformula}}.
The brms helper functions \code{\link[brms]{make_stancode}} and \code{\link[brms]{make_standata}} build Stan models.
The wrapper calls call \code{\link{cs_sampling}}.

PLOTTING

\code{\link{cs_sampling}} has an associated plotting method \code{\link{plot.cs_sampling}}, which compares the parameter draws before and after the asymptotic adjustment via
\code{\link[GGally]{ggpairs}}. The output can be plotted as a pairs plot or as individual plots.

HELPER FUNCTIONS

\code{\link{cs_sampling}} uses helper functions which manipulate the output from \code{\link[rstan]{sampling}},
apply a custom estimation function for use with \code{\link[survey]{withReplicates}}, and apply an afine transformation to a 1D array to recenter and scale it.
}
\examples{
library(csSampling)
rstan_options(auto_write = TRUE)

####BRMS Wrapper#####
#Linear regression from survey package api data
data(api)
dstrat<-svydesign(id=~1,strata=~stype, weights=~pw, data=apistrat, fpc=~fpc)
##need to scale the weights in the survey design and in the stan model##
apistrat$wtsscl <- apistrat$pw *length(apistrat$pw)/sum(apistrat$pw)

dstrat_sc<-svydesign(id=~1,strata=~stype, weights=~wtsscl, data=apistrat, fpc=~fpc)
###example 1 api00~ell+meals+mobility##
#Use cs_sampling directly#  

stancode <- make_stancode(brmsformula(api00|weights(wtsscl) ~ ell+meals+mobility,center = FALSE), 
                         data = apistrat, family = gaussian(), save_model = "brms_wt_lm.stan")

mod_brms  <- stan_model('brms_wt_lm.stan')

data_brms <- make_standata(brmsformula(api00|weights(wtsscl) ~ ell+meals+mobility,center = FALSE), 
                          data = apistrat, family = gaussian())
            
set.seed(12345)
mod.brms_1 <- cs_sampling(svydes = dstrat_sc, mod_stan = mod_brms, data_stan = data_brms, 
                         ctrl_stan = list(chains = 2, iter = 2000, warmup = 1000, thin = 2))

#Compare to Wrapper#                          
set.seed(12345)
mod.brms_2 <- cs_sampling_brms(svydes = dstrat_sc, 
                       brmsmod = brmsformula(api00|weights(wtsscl) ~ ell+meals+mobility,center = FALSE), 
                       data = apistrat, family = gaussian())
                    
#compare to svyglm
summary(svyglm(api00~ell+meals+mobility, design=dstrat_sc))         

#plot all parameters by default
plot(mod.brms_3)
plot(mod.brms_3, varnames = paste("b", 1:3, sep =""))

pp <- plot(mod.brms_3)
pp[2,1]

###Custom Stan Model###
#Weighted dirichlet-multinomial model

mod_dm <- stan_model('wt_proportion_estimate') #Preload/associated with package
                                                                                                                           data = apistrat, family = gaussian())
#Read in Dataset and Set Design
d<-read_dta("UG_Data for Analysis.dta") #Preload/associated with package

svydes<-svydesign(ids=~cl_id,strata=~str_id,weight=~wtfinal,data=d)
rep_dsn<-as.svrepdesign(svydes,"mrbbootstrap",replicates=1000)

#Quick look at the estimates from survey package
svymean(~as.factor(voteinlean),rep_dsn,return.replicates=TRUE)

#Set the Data for Stan
y <- as.factor(rep_dsn$variables$voteinlean)
yM <- model.matrix(~y -1)
n <- dim(yM)[1]
K <- dim(yM)[2]
#Uniform prior for alpha for now
alpha<-rep(1,K)

#Create stan Data list
data_stan<-list("y"=yM,"alpha"=alpha,"K"=K, "n" = n, 
               "weights" = c(rep_dsn$variables$wtfinal))#weights already sum to n

ctrl_stan<-list("chains"=1,"iter"=3000,"warmup"=500,"thin"=1)

mod1 <- cs_sampling(svydes = rep_dsn, mod_stan = mod, par_stan = par_stan, data_stan = data_stan,
          ctrl_stan = ctrl_stan, rep_design = T,ctrl_rep = NULL)
plot(mod1)           
}
\author{
\strong{Maintainer}: Ryan Hornby \email{ryanhornby1999@gmail.com}

Authors:
\itemize{
  \item Matthew Williams \email{mrwillia@nsf.gov}
  \item Terrance Savitsky \email{Savitsky.Terrance@bls.gov}
}

}
\keyword{internal}

% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cs_sampling.r
\name{cs_sampling}
\alias{cs_sampling}
\title{cs_sampling}
\usage{
cs_sampling(
  svydes,
  mod_stan,
  par_stan = NA,
  data_stan,
  ctrl_stan = list(chains = 1, iter = 2000, warmup = 1000, thin = 1),
  rep_design = FALSE,
  ctrl_rep = list(replicates = 100, type = "mrbbootstrap"),
  sampling_args = list()
)
}
\arguments{
\item{svydes}{\itemize{
\item a svydesign object or a svyrepdesign object (see survey package). This contains cluster ID, strata, and weight information (svydesign) or replicate weight information (svyrepdesign)
}}

\item{mod_stan}{\itemize{
\item a compiled stan model to be called by rstan::sampling
}}

\item{par_stan}{\itemize{
\item a list of subset of parameters to output after adjustment. All parameters are adjusted including the derived parameters, so users may want to only compare subsets. The defualt, NA, will return all parameters.
}}

\item{data_stan}{\itemize{
\item a list of data inputs for rstan::sampling() associated with mod_stan
}}

\item{ctrl_stan}{\itemize{
\item a list of control parameters to pass to rstan::sampling(). Currently includes the number of chains, iter, warmpup, and thin with defualts
}}

\item{rep_design}{\itemize{
\item logical indicating if the svydes object is a svyrepdesign. If FALSE, the design will be converted to a svyrepdesign using ctrl_rep settings
}}

\item{ctrl_rep}{\itemize{
\item a list of settings when converting svydes from a svydesign object to a svyrepdesign object. replicates - number of replicate weights. type - the type of replicate method to use, the default is mrbbootstrap which sample half of the clusters in each strata to make each replicate
}}

\item{sampling_args}{\itemize{
\item a list of extra arguments that get passed to sampling.
}}
}
\value{
A list of the following:
\itemize{
\item stan_fit - the original stanfit object returned by rstan::sampling for the weighted model
\item sampled_parms - the array of parameters extracted from stan_fit corresponding to the parameter block in the stan model (specificed by stan_pars)
\item adjusted_parms - the array (or matrix?) of adjusted parameters, corresponding to sampled_parms which have been rescaled and rotated
}
}
\description{
cs_sampling is a wrapper function. It takes in a svydesign object (survey) and a stan model and inputs (rstan).
It calls the rstan::sampling to generate MCMC draws from the model. The constrained parameters are converted to unconstrained, adjusted, converted back to constrained and then output.
The adjustment process estimates a sandwich matrix adjustment to the posterior variance from two information matrices H and J.
J is estimated via resampling with the withReplicates. For each set of replicate weights, rstan:sampling is called with no chains to instantiate a stanfit object.
The stanfit object has an associated method grad_log_prob, which returns the gradient for a given input of unconstrained parameters.
The variance of this gradient is taken across the replicates and provides a estimate of the J matrix
H is a Hessian estimated at the posterior mean via optimHess (stats) using grad_log_prob and the posterior mean as inputs
The asymptotic covariance for the posterior mean is then calculated as Hi V Hi, where Hi is the inverse of H.
The asymptotic covariance for the posterior sampling procedure (due to mis-specification) is Hi. We take the "sqaure" root of these matrices
via cholesky decomposition R1'R1 = Hi V Hi and R2'R2 = Hi.
The final adjustment rescales/rotates the posterior sample by R2iR1 where R2i is the inverse of R2.
The final adjust can be interpreted as an asymptotic correction for model mis-specification due to using survey sampling weights as plug in values in the likelihood. This is often know as a "design effect" which is the "ratio" between the variance from simple random sample (Hi) and a complex survey sample (HiVHi)
}
\references{
Williams, M. R., and Savitsky, T. D. (2020) Uncertainty Estimation for Pseudo-Bayesian Inference Under Complex Sampling. International Statistical Review, https://doi.org/10.1111/insr.12376.
}
